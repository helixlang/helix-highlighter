<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>version</key>
    <string>0.2.2</string>
    <key>scopeName</key>
    <string>source.helix</string>
    <key>name</key>
    <string>helix</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#block-comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#attributes</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#class_reference</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#constants</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#functions</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#types</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#define</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#namespaces</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#punctuation</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#strings</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#variables</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#generics</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.line.helix</string>
            <key>match</key>
            <string>//.*$</string>
          </dict>
        </array>
      </dict>
      <key>block-comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>block comments</string>
            <key>name</key>
            <string>comment.block.helix</string>
            <key>begin</key>
            <string>/\*</string>
            <key>end</key>
            <string>\*/</string>
          </dict>
        </array>
      </dict>
      <key>constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.helix</string>
            <key>match</key>
            <string>\b\d[\d_]*(\.?)[\d_]*(?:(E|e)([+-]?)([\d_]+))?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.hex.helix</string>
            <key>match</key>
            <string>\b0x[\da-fA-F_]+\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.oct.helix</string>
            <key>match</key>
            <string>\b0o[0-7_]+\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.bin.helix</string>
            <key>match</key>
            <string>\b0b[01_]+\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.bool.helix</string>
            <key>match</key>
            <string>\b(true|false|null|nullptr)\b</string>
          </dict>
        </array>
      </dict>
      <key>escapes</key>
      <dict>
        <key>comment</key>
        <string>escapes: ASCII, byte, Unicode, quote, regex</string>
        <key>name</key>
        <string>constant.character.escape.helix</string>
        <key>match</key>
        <string>(\\)(?:(?:(x[0-7][\da-fA-F])|(u(\{)[\da-fA-F]{4,6}(\}))|.))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.helix</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.bit.helix</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.unicode.helix</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.unicode.punctuation.helix</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.unicode.punctuation.helix</string>
          </dict>
        </dict>
      </dict>
      <key>functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>function definition</string>
            <key>name</key>
            <string>meta.function.definition.helix</string>
            <key>begin</key>
            <string>\b(fn)\s+(((?!self|super))?[A-Za-z0-9_]+)((\()|(&lt;))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.fn.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.helix</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.brackets.round.helix</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.brackets.angle.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\{|;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.brackets.curly.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#keywords</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#class_reference</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#constants</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#functions</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#define</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#namespaces</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#strings</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>function/method calls, chaining, and generic function calls, including generics before the parenthesis</string>
            <key>name</key>
            <string>meta.function.call.helix</string>
            <key>begin</key>
            <string>(((?!self|super))?[A-Za-z0-9_]+)((&lt;([A-Za-z0-9_]+(::[A-Za-z0-9_]+)*(,\s*[A-Za-z0-9_]+(::[A-Za-z0-9_]+)*)*)&gt;)?)(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.helix</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.generic.helix</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.helix</string>
              </dict>
              <key>9</key>
              <dict>
                <key>name</key>
                <string>punctuation.brackets.round.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.brackets.round.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#attributes</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#keywords</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#class_reference</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#constants</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#functions</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#define</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#namespaces</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#strings</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variables</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#generics</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Control flow keywords</string>
            <key>name</key>
            <string>keyword.control.helix</string>
            <key>match</key>
            <string>\b(break|case|continue|default|else|for|if|match|switch|unless|in|while)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Function and method keywords</string>
            <key>name</key>
            <string>keyword.function.helix</string>
            <key>match</key>
            <string>\b(async|define|fn|inline|macro|op|return|yield)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Class and struct keywords</string>
            <key>name</key>
            <string>keyword.class.helix</string>
            <key>match</key>
            <string>\b(class|enum|struct|type|union)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Inheritance and polymorphism keywords</string>
            <key>name</key>
            <string>keyword.inheritance.helix</string>
            <key>match</key>
            <string>\b(abstract|derives|interface|requires|has)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Error handling keywords</string>
            <key>name</key>
            <string>keyword.error.helix</string>
            <key>match</key>
            <string>\b(catch|finally|panic|try|test)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Variable declaration keywords</string>
            <key>name</key>
            <string>keyword.declaration.helix</string>
            <key>match</key>
            <string>\b(eval|let|static|const)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Access specifiers</string>
            <key>name</key>
            <string>keyword.access.helix</string>
            <key>match</key>
            <string>\b(module|priv|pub|prot)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Module importing keywords</string>
            <key>name</key>
            <string>keyword.import.helix</string>
            <key>match</key>
            <string>\b(as|ffi|import)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Concurrency keywords</string>
            <key>name</key>
            <string>keyword.concurrency.helix</string>
            <key>match</key>
            <string>\b(atomic|await|spawn|thread)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Other keywords</string>
            <key>name</key>
            <string>keyword.other.helix</string>
            <key>match</key>
            <string>\b(delete|unsafe)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Primitive Type keywords</string>
            <key>name</key>
            <string>keyword.primitive.helix</string>
            <key>match</key>
            <string>\b(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize|char|bool|void)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Operators</string>
            <key>name</key>
            <string>keyword.operator.helix</string>
            <key>match</key>
            <string>\b(\+|\+\+|\+=|\+-|\-|\-\-|\-=|\*|\*=|\/|\/=|%|%=|&|&=|&&|&&=|@|@=|\^|\^=|^^|^^=|~|~&|~&=|~\||~\|=|\||\|=|\|\||\|\|=|!|!=|!&|!&=|!\||!\|=|&lt;&lt;|&lt;&lt;=|&gt;&gt;|&gt;&gt;=|==|===|&gt;|&gt;=|&lt;|&lt;=|\.\.|\.\.=|::|-&gt;|=|\*\*|\*\*=)\b</string>
          </dict>
        </array>
      </dict>
      <key>types</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>numeric types</string>
            <key>match</key>
            <string>\b(int|float|decimal)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.numeric.helix</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>complex types</string>
            <key>match</key>
            <string>\b(string|list|map|set|tuple)\b</string>
            <key>name</key>
            <string>entity.name.type.complex.helix</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>user-defined types, possibly with generics</string>
            <key>match</key>
            <string>\b(class|struct|enum|union|type)\s+([A-Z][A-Za-z0-9_]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.declaration.type.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.user-defined.helix</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>type parameters</string>
            <key>match</key>
            <string>\b([A-Z][A-Za-z0-9_]*)\b</string>
            <key>name</key>
            <string>entity.name.type.parameter.helix</string>
          </dict>
        </array>
      </dict>
      <key>generics</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>generic type parameters</string>
            <key>name</key>
            <string>storage.type.generic.helix</string>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.generic.begin.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.generic.end.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespaces</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>loops</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Standard for loop</string>
            <key>name</key>
            <string>meta.loop.for.helix</string>
            <key>begin</key>
            <string>\b(for)\s+[a-zA-Z_][a-zA-Z0-9_]*\s*;</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.for.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.variable.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\{</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parenthesis.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
            </array>
          </dict>
        </array>
      </dict>
      <key>define</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Define invocation with optional parameters</string>
            <key>name</key>
            <string>meta.define.invocation.helix</string>
            <key>match</key>
            <string>\s?([a-z_][A-Za-z0-9_]+!)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.define.helix</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Define macro with optional parameter list and complex body</string>
            <key>name</key>
            <string>meta.define.macro.helix</string>
            <key>begin</key>
            <string>\b(define)\s+([a-z0-9_]+[A-Za-z0-9_]*!)(\s*\()?</string>
            <key>end</key>
            <string>\)\s*-&gt;\s*([a-z0-9_]+)\s*\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.define.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.define.helix</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.helix</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.body.begin.helix</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Proc macro</string>
            <key>name</key>
            <string>meta.procedure.macro.helix</string>
            <key>begin</key>
            <string>\b(macro)\s+([a-z0-9_]+[A-Za-z0-9_]*)(\()</string>
            <key>end</key>
            <string>\)\s*-&gt;\s*([a-z0-9_]+)\s*\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.macro.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.macro.helix</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.helix</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.helix</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.return.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.body.begin.helix</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>namespaces</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>namespace (non-type, non-function path segment)</string>
            <key>name</key>
            <string>entity.other.namespace.helix</string>
            <key>match</key>
            <string>(?&lt;![A-Za-z0-9_])([A-Za-z0-9_]+)(::)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.namespace.helix</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>punctuation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>punctuation.comma.helix</string>
            <key>match</key>
            <string>,</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.brackets.curly.helix</string>
            <key>match</key>
            <string>[{}]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.brackets.round.helix</string>
            <key>match</key>
            <string>[()]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.semi.helix</string>
            <key>match</key>
            <string>;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.brackets.square.helix</string>
            <key>match</key>
            <string>[\[\]]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.brackets.angle.helix</string>
            <key>match</key>
            <string>(?&lt;!=)[&lt;&gt;]</string>
          </dict>
        </array>
      </dict>
      <key>strings</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>double-quoted strings and byte strings</string>
            <key>name</key>
            <string>string.quoted.double.helix</string>
            <key>begin</key>
            <string>(b|r|f|u|rf|br|uf)?(")</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.quoted.byte.raw.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#escapes</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#interpolations</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>characters and bytes</string>
            <key>name</key>
            <string>string.quoted.single.char.helix</string>
            <key>begin</key>
            <string>(b|r|f|u|rf|br|uf)?(')</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.quoted.byte.raw.helix</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.char.helix</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.char.helix</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#escapes</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>class_reference</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>self</string>
            <key>name</key>
            <string>variable.language.self.helix</string>
            <key>match</key>
            <string>\bself\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>super</string>
            <key>name</key>
            <string>variable.language.super.helix</string>
            <key>match</key>
            <string>\bsuper\b</string>
          </dict>
        </array>
      </dict>
      <key>variables</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.other.helix</string>
            <key>match</key>
            <string>\b[a-zA-Z_][a-zA-Z0-9_]*\b</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>