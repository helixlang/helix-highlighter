{
	"version": "0.1.1",
	"scopeName": "source.helix",
	"name": ["Helix", "helix"],
	"patterns": [
		{
			"comment": "boxed slice literal",
			"includes": ["#block-comments", "#comments", "#class_reference", "#punctuation", "#types"]
		},
		{
			"comment": "define",
			"name": "meta.define.rules.helix",
			"match": "\\b(define!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)",
			"captures": {
				"1": {"name": "entity.name.function.define.rules.helix"},
				"3": {"name": "entity.name.function.define.helix"},
				"4": {"name": "entity.name.type.define.helix"},
				"5": {"name": "punctuation.brackets.curly.helix"}
		  	}
		},
		{"include": "#block-comments"},
		{"include": "#comments"},
		{"include": "#attributes"},
		{"include": "#class_reference"},
		{"include": "#constants"},
		{"include": "#functions"},
		{"include": "#types"},
		{"include": "#keywords"},
		{"include": "#define"},
		{"include": "#namespaces"},
		{"include": "#punctuation"},
		{"include": "#strings"},
		{"include": "#variables"}
	  ],

	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.helix",
					"match": "//.*$"
				}
			]
		},
		"block-comments": {
			"patterns": [
				{
					"comment": "block comments",
					"name": "comment.block.helix",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"constants": {
			"patterns": [
				{
				  	"name": "constant.numeric.decimal.helix",
				  	"match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?\\b"
				},
				{
				  	"name": "constant.numeric.hex.helix",
				  	"match": "\\b0x[\\da-fA-F_]+\\b"
				},
				{
				  	"name": "constant.numeric.oct.helix",
				  	"match": "\\b0o[0-7_]+\\b"
				},
				{
				  	"name": "constant.numeric.bin.helix",
				  	"match": "\\b0b[01_]+\\b"
				},
				{
				  	"name": "constant.language.bool.helix",
				  	"match": "\\b(true|false)\\b"
				}
			]
		},
		"escapes": {
			"comment": "escapes: ASCII, byte, Unicode, quote, regex",
			"name": "constant.character.escape.helix",
			"match": "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
			"captures": {
				"1": {"name": "constant.character.escape.backslash.helix"},
				"2": {"name": "constant.character.escape.bit.helix"},
				"3": {"name": "constant.character.escape.unicode.helix"},
				"4": {"name": "constant.character.escape.unicode.punctuation.helix"},
				"5": {"name": "constant.character.escape.unicode.punctuation.helix"}
			}
		},
		"functions": {
			"patterns": [
				{
					"comment": "function definition",
					"name": "meta.function.definition.helix",
					"begin": "\\b(fn)\\s+((?:r#(?!self|super))?[A-Za-z0-9_]+)((\\()|(<))",
					"beginCaptures": {
						"1": {"name": "keyword.other.fn.helix"},
						"2": {"name": "entity.name.function.helix"},
						"4": {"name": "punctuation.brackets.round.helix"},
						"5": {"name": "punctuation.brackets.angle.helix"}
					},
					"end": "\\{|;",
					"endCaptures": {
						"0": {"name": "punctuation.brackets.curly.helix"}
					},
					"patterns": [
						{"include": "#block-comments"},
						{"include": "#comments"},
						{"include": "#keywords"},
						{"include": "#class_reference"},
						{"include": "#constants"},
						{"include": "#functions"},
						{"include": "#define"},
						{"include": "#namespaces"},
						{"include": "#punctuation"},
						{"include": "#strings"},
						{"include": "#types"},
						{"include": "#variables"}
					]
				},
				{
					"comment": "function/method calls, chaining",
					"name": "meta.function.call.helix",
					"begin": "((?:r#(?!self|super))?[A-Za-z0-9_]+)(\\()",
					"beginCaptures": {
						"1": {"name": "entity.name.function.helix"},
						"2": {"name": "punctuation.brackets.round.helix"}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {"name": "punctuation.brackets.round.helix"}
					},
					"patterns": [
						{"include": "#block-comments"},
						{"include": "#comments"},
						{"include": "#attributes"},
						{"include": "#keywords"},
						{"include": "#class_reference"},
						{"include": "#constants"},
						{"include": "#functions"},
						{"include": "#define"},
						{"include": "#namespaces"},
						{"include": "#punctuation"},
						{"include": "#strings"},
						{"include": "#types"},
						{"include": "#variables"}
					]
				}
			]
		},
        "keywords": {
            "patterns": [
                {
                    "comment": "Control flow keywords",
                    "name": "keyword.control.helix",
                    "match": "\\b(if|else|unless|for|while|break|continue|case|match|switch|default)\\b"
                },
                {
                    "comment": "Function and method keywords",
                    "name": "keyword.function.helix",
                    "match": "\\b(fn|op|return|inline|macro|define)\\b"
                },
                {
                    "comment": "Class and struct keywords",
                    "name": "keyword.class.helix",
                    "match": "\\b(class|struct|enum|union|type)\\b"
                },
                {
                    "comment": "Inheritance and polymorphism keywords",
                    "name": "keyword.inheritance.helix",
                    "match": "\\b(abstract|interface|derives)\\b"
                },
                {
                    "comment": "Error handling keywords",
                    "name": "keyword.error.helix",
                    "match": "\\b(try|panic|catch|finally)\\b"
                },
                {
                    "comment": "Variable declaration keywords",
                    "name": "keyword.declaration.helix",
                    "match": "\\b(let|auto|const|global|priv|proc)\\b"
                },
                {
                    "comment": "Access specifiers",
                    "name": "keyword.access.helix",
                    "match": "\\b(priv|namespace|proc)\\b"
                },
                {
                    "comment": "Module importing keywords",
                    "name": "keyword.import.helix",
                    "match": "\\b(from|using|import|extern|as)\\b"
                },
                {
                    "comment": "Concurrency keywords",
                    "name": "keyword.concurrency.helix",
                    "match": "\\b(async|spawn|await|thread)\\b"
                },
                {
                    "comment": "Other keywords",
                    "name": "keyword.other.helix",
                    "match": "\\b(is|yield|delete|void|null)\\b"
                },
                {
                    "comment": "Operators",
                    "name": "keyword.operator.helix",
                    "match": "\\b(\\+|\\-|\\*|\\/|%|@|\\*\\*|\\+-|&|~&|\\||~\\||\\^|~|<<|>>|==|!=|>|<|>=|<=|===|=|\\+=|\\-=|\\*=|\\/=|%=|@=|~=|\\*\\*=|&&=|!&=|\\|\\|=|!\\|=|^^=|&=|~&=|\\|=|~\\|=|\\^=|~\\|=|<<=|>>=|\\+\\+|\\-\\-|!|&&|!&|\\|\\|!\\||^^|\\.\\.|\\.\\.=|->|::)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "comment": "numeric types",
                    "match": "\\b(i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|f32|f64|usize|isize|int|float|decimal)\\b",
                    "captures": {
                        "1": {"name": "entity.name.type.numeric.helix"}
                    }
                },
                {
                    "comment": "complex types",
                    "match": "\\b(string|char|bool|list|map|set|tuple)\\b",
                    "name": "entity.name.type.complex.helix"
                },
                {
					"comment": "user-defined types, possibly with generics",
					"match": "\\b(class|struct|enum|union|type)\\s+([A-Z][A-Za-z0-9_]*)(<(.*)>)?\\b",
					"captures": {
						"1": {"name": "keyword.declaration.type.helix"},
						"2": {"name": "entity.name.type.user-defined.helix"},
						"4": {"name": "punctuation.definition.generic.helix"},
						"5": {"name": "entity.name.type.generic.helix"}
					}
				},
                {
                    "comment": "type parameters",
                    "match": "\\b([A-Z][A-Za-z0-9_]*)(<(.*)>)?\\b",
                    "name": "entity.name.type.parameter.helix"
                }
            ]
        },
		"loops": {
			"patterns": [
				{
					"comment": "Standard for loop",
					"name": "meta.loop.for.helix",
					"begin": "\\b(for)\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*;",
					"beginCaptures": {
						"1": {"name": "keyword.control.loop.for.helix"},
						"2": {"name": "storage.type.variable.helix"}
					},
					"end": "\\{",
					"endCaptures": {
						"0": {"name": "punctuation.definition.parenthesis.helix"}
					},
					"patterns": []
				}
			]
		},
		"define": {
			"patterns": [
				{
					"comment": "define",
					"name": "meta.define.helix",
					"match": "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
					"captures": {
						"2": {"name": "entity.name.function.define.helix"},
						"3": {"name": "entity.name.type.define.helix"}
					}
				}
			]
		},
		"namespaces": {
			"patterns": [
				{
					"comment": "namespace (non-type, non-function path segment)",
					"match": "(?<![A-Za-z0-9_])([A-Za-z0-9_]+)(::)",
					"captures": {
						"1": {"name": "entity.name.namespace.helix"},
						"2": {"name": "keyword.operator.namespace.helix"}
					}
				}
			]
		},
		"punctuation": {
			"patterns": [
				{"name": "punctuation.comma.helix", "match": ","},
				{"name": "punctuation.brackets.curly.helix", "match": "[{}]"},
				{"name": "punctuation.brackets.round.helix", "match": "[()]"},
				{"name": "punctuation.semi.helix", "match": ";"},
				{"name": "punctuation.brackets.square.helix", "match": "[\\[\\]]"},
				{"name": "punctuation.brackets.angle.helix", "match": "(?<!=)[<>]"}
			]
		},
		"strings": {
			"patterns": [
				{
					"comment": "double-quoted strings and byte strings",
					"name": "string.quoted.double.helix",
					"begin": "(b|r|f|u|rf|br|uf)?(\")",
					"beginCaptures": {
						"1": {"name": "string.quoted.byte.raw.helix"},
						"2": {"name": "punctuation.definition.string.helix"}
					},
					"end": "\"",
					"endCaptures": {
						"0": {"name": "punctuation.definition.string.helix"}
					},
					"patterns": [
						{"include": "#escapes"},
						{"include": "#interpolations"}
					]
				},
				{
					"comment": "characters and bytes",
					"name": "string.quoted.single.char.helix",
					"begin": "(b|r|f|u|rf|br|uf)?(')",
					"beginCaptures": {
						"1": {"name": "string.quoted.byte.raw.helix"},
						"2": {"name": "punctuation.definition.char.helix"}
					},
					"end": "'",
					"endCaptures": {
						"0": {"name": "punctuation.definition.char.helix"}
					},
					"patterns": [{"include": "#escapes"}]
				}

			]
		},
		"class_reference": {
			"patterns": [
				{
					"comment": "self",
					"name": "variable.language.self.helix",
					"match": "\\bself\\b"
				},
				{
					"comment": "super",
					"name": "variable.language.super.helix",
					"match": "\\bsuper\\b"
				}
			]
		},
		"variables": {
			"patterns": [{"name": "variable.other.helix", "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"}]
		}
	}
}